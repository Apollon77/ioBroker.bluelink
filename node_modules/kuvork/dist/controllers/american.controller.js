var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import got from 'got';
import AmericanVehicle from '../vehicles/american.vehicle';
import { SessionController } from './controller';
import logger from '../logger';
import { BASE_URL, CLIENT_ID, CLIENT_SECRET, API_HOST } from '../constants/america';
import { manageBluelinkyError } from '../tools/common.tools';
export class AmericanController extends SessionController {
    constructor(userConfig) {
        super(userConfig);
        this.vehicles = [];
        logger.debug('US Controller created');
    }
    refreshAccessToken() {
        return __awaiter(this, void 0, void 0, function* () {
            const shouldRefreshToken = Math.floor(Date.now() / 1000 - this.session.tokenExpiresAt) >= -10;
            try {
                if (this.session.refreshToken && shouldRefreshToken) {
                    logger.debug('refreshing token');
                    const response = yield got(`${BASE_URL}/v2/ac/oauth/token/refresh`, {
                        method: 'POST',
                        body: {
                            'refresh_token': this.session.refreshToken,
                        },
                        headers: {
                            'client_secret': CLIENT_SECRET,
                            'client_id': CLIENT_ID,
                        },
                        json: true,
                    });
                    logger.debug(response.body);
                    this.session.accessToken = response.body.access_token;
                    this.session.refreshToken = response.body.refresh_token;
                    this.session.tokenExpiresAt = Math.floor(+new Date() / 1000 + parseInt(response.body.expires_in));
                    logger.debug('Token refreshed');
                    return 'Token refreshed';
                }
                logger.debug('Token not expired, no need to refresh');
                return 'Token not expired, no need to refresh';
            }
            catch (err) {
                throw manageBluelinkyError(err, 'AmericanController.refreshAccessToken');
            }
        });
    }
    // TODO: come up with a better return value?
    login() {
        return __awaiter(this, void 0, void 0, function* () {
            logger.debug('Logging in to the API');
            try {
                const response = yield got(`${BASE_URL}/v2/ac/oauth/token`, {
                    method: 'POST',
                    body: {
                        username: this.userConfig.username,
                        password: this.userConfig.password,
                    },
                    headers: {
                        'client_secret': CLIENT_SECRET,
                        'client_id': CLIENT_ID,
                    },
                    json: true,
                });
                logger.debug(response.body);
                if (response.statusCode !== 200) {
                    return 'login bad';
                }
                this.session.accessToken = response.body.access_token;
                this.session.refreshToken = response.body.refresh_token;
                this.session.tokenExpiresAt = Math.floor(+new Date() / 1000 + parseInt(response.body.expires_in));
                return 'login good';
            }
            catch (err) {
                throw manageBluelinkyError(err, 'AmericanController.login');
            }
        });
    }
    logout() {
        return __awaiter(this, void 0, void 0, function* () {
            return 'OK';
        });
    }
    getVehicles() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield got(`${BASE_URL}/ac/v2/enrollment/details/${this.userConfig.username}`, {
                    method: 'GET',
                    headers: {
                        'access_token': this.session.accessToken,
                        'client_id': CLIENT_ID,
                        'Host': API_HOST,
                        'User-Agent': 'okhttp/3.12.0',
                        'payloadGenerated': '20200226171938',
                        'includeNonConnectedVehicles': 'Y',
                    },
                });
                const data = JSON.parse(response.body);
                if (data.enrolledVehicleDetails === undefined) {
                    this.vehicles = [];
                    return this.vehicles;
                }
                this.vehicles = data.enrolledVehicleDetails.map(vehicle => {
                    const vehicleInfo = vehicle.vehicleDetails;
                    const vehicleConfig = {
                        nickname: vehicleInfo.nickName,
                        name: vehicleInfo.nickName,
                        vin: vehicleInfo.vin,
                        regDate: vehicleInfo.enrollmentDate,
                        brandIndicator: vehicleInfo.brandIndicator,
                        regId: vehicleInfo.regid,
                        generation: vehicleInfo.modelYear > 2016 ? '2' : '1',
                    };
                    return new AmericanVehicle(vehicleConfig, this);
                });
                return this.vehicles;
            }
            catch (err) {
                throw manageBluelinkyError(err, 'AmericanController.getVehicles');
            }
        });
    }
}
//# sourceMappingURL=american.controller.js.map