var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { HTTPError, ParseError } from 'got';
export class ManagedBluelinkyError extends Error {
    constructor(message, source) {
        super(message);
        this.source = source;
        this.name = ManagedBluelinkyError.ErrorName;
    }
}
ManagedBluelinkyError.ErrorName = 'ManagedBluelinkyError';
export const manageBluelinkyError = (err, context) => {
    var _a;
    if (err instanceof HTTPError) {
        return new ManagedBluelinkyError(`${context ? `@${context}: ` : ''}[${err.statusCode}] ${err.statusMessage} on [${err.method}] ${err.url} - ${JSON.stringify(err.body)}`, err);
    }
    if (err instanceof ParseError) {
        return new ManagedBluelinkyError(`${context ? `@${context}: ` : ''} Parsing error on [${err.method}] ${err.url} - ${JSON.stringify((_a = err.response) === null || _a === void 0 ? void 0 : _a.body)}`, err);
    }
    if (err instanceof Error) {
        return err;
    }
    return err;
};
export const asyncMap = (array, callback) => __awaiter(void 0, void 0, void 0, function* () {
    const mapped = [];
    for (let index = 0; index < array.length; index++) {
        mapped.push(yield callback(array[index], index, array));
    }
    return mapped;
});
export const uuidV4 = () => 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
    const r = (Math.random() * 16) | 0, v = c == 'x' ? r : (r & 0x3) | 0x8;
    return v.toString(16);
});
//# sourceMappingURL=common.tools.js.map