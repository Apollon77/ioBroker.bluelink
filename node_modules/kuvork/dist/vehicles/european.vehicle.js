var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { REGIONS, DEFAULT_VEHICLE_STATUS_OPTIONS } from '../constants';
import { EVPlugTypes, EVChargeModeTypes, } from '../interfaces/common.interfaces';
import got from 'got';
import logger from '../logger';
import { Vehicle } from './vehicle';
import { celciusToTempCode, tempCodeToCelsius } from '../util';
import { EU_BASE_URL } from '../constants/europe';
import { getStamp } from '../tools/european.tools';
import { manageBluelinkyError, ManagedBluelinkyError } from '../tools/common.tools';
import { addMinutes, parse as parseDate } from 'date-fns';
const POSSIBLE_CHARGE_LIMIT_VALUES = [50, 60, 70, 80, 90, 100];
export default class EuropeanVehicle extends Vehicle {
    constructor(vehicleConfig, controller) {
        super(vehicleConfig, controller);
        this.vehicleConfig = vehicleConfig;
        this.controller = controller;
        this.region = REGIONS.EU;
        logger.debug(`EU Vehicle ${this.vehicleConfig.id} created`);
    }
    checkControlToken() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield this.controller.refreshAccessToken();
            if (((_a = this.controller.session) === null || _a === void 0 ? void 0 : _a.controlTokenExpiresAt) !== undefined) {
                if (!this.controller.session.controlToken ||
                    Date.now() / 1000 > this.controller.session.controlTokenExpiresAt) {
                    yield this.controller.enterPin();
                }
            }
        });
    }
    start(config) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.checkControlToken();
            try {
                const response = yield got(`${EU_BASE_URL[this.userConfig.brand]}/api/v2/spa/vehicles/${this.vehicleConfig.id}/control/temperature`, {
                    method: 'POST',
                    body: {
                        action: 'start',
                        hvacType: 0,
                        options: {
                            defrost: config.defrost,
                            heating1: config.windscreenHeating ? 1 : 0,
                        },
                        tempCode: celciusToTempCode(config.temperature),
                        unit: config.unit,
                    },
                    headers: {
                        'Authorization': this.controller.session.controlToken,
                        'ccsp-device-id': this.controller.session.deviceId,
                        'Content-Type': 'application/json',
                        'Stamp': yield getStamp(this.userConfig.brand),
                    },
                    json: true,
                });
                logger.info(`Climate started for vehicle ${this.vehicleConfig.id}`);
                return response.body;
            }
            catch (err) {
                throw manageBluelinkyError(err, 'EuropeVehicle.start');
            }
        });
    }
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.checkControlToken();
            try {
                const response = yield got(`${EU_BASE_URL[this.userConfig.brand]}/api/v2/spa/vehicles/${this.vehicleConfig.id}/control/temperature`, {
                    method: 'POST',
                    body: {
                        action: 'stop',
                        hvacType: 0,
                        options: {
                            defrost: true,
                            heating1: 1,
                        },
                        tempCode: '10H',
                        unit: 'C',
                    },
                    headers: {
                        'Authorization': this.controller.session.controlToken,
                        'ccsp-device-id': this.controller.session.deviceId,
                        'Content-Type': 'application/json',
                        'Stamp': yield getStamp(this.userConfig.brand),
                    },
                    json: true,
                });
                logger.info(`Climate stopped for vehicle ${this.vehicleConfig.id}`);
                return response.body;
            }
            catch (err) {
                throw manageBluelinkyError(err, 'EuropeVehicle.stop');
            }
        });
    }
    lock() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.checkControlToken();
            try {
                const response = yield got(`${EU_BASE_URL[this.userConfig.brand]}/api/v2/spa/vehicles/${this.vehicleConfig.id}/control/door`, {
                    method: 'POST',
                    headers: {
                        'Authorization': this.controller.session.controlToken,
                        'ccsp-device-id': this.controller.session.deviceId,
                        'Content-Type': 'application/json',
                        'Stamp': yield getStamp(this.userConfig.brand),
                    },
                    body: {
                        action: 'close',
                        deviceId: this.controller.session.deviceId,
                    },
                    json: true,
                });
                if (response.statusCode === 200) {
                    logger.debug(`Vehicle ${this.vehicleConfig.id} locked`);
                    return 'Lock successful';
                }
                return 'Something went wrong!';
            }
            catch (err) {
                throw manageBluelinkyError(err, 'EuropeVehicle.lock');
            }
        });
    }
    unlock() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.checkControlToken();
            try {
                const response = yield got(`${EU_BASE_URL[this.userConfig.brand]}/api/v2/spa/vehicles/${this.vehicleConfig.id}/control/door`, {
                    method: 'POST',
                    headers: {
                        'Authorization': this.controller.session.controlToken,
                        'ccsp-device-id': this.controller.session.deviceId,
                        'Content-Type': 'application/json',
                        'Stamp': yield getStamp(this.userConfig.brand),
                    },
                    body: {
                        action: 'open',
                        deviceId: this.controller.session.deviceId,
                    },
                    json: true,
                });
                if (response.statusCode === 200) {
                    logger.debug(`Vehicle ${this.vehicleConfig.id} unlocked`);
                    return 'Unlock successful';
                }
                return 'Something went wrong!';
            }
            catch (err) {
                throw manageBluelinkyError(err, 'EuropeVehicle.unlock');
            }
        });
    }
    fullStatus(input) {
        return __awaiter(this, void 0, void 0, function* () {
            const statusConfig = Object.assign(Object.assign({}, DEFAULT_VEHICLE_STATUS_OPTIONS), input);
            yield this.checkControlToken();
            try {
                const cachedResponse = yield got(`${EU_BASE_URL[this.userConfig.brand]}/api/v2/spa/vehicles/${this.vehicleConfig.id}/status/latest`, {
                    method: 'GET',
                    headers: {
                        'Authorization': this.controller.session.controlToken,
                        'ccsp-device-id': this.controller.session.deviceId,
                        'Content-Type': 'application/json',
                        'Stamp': yield getStamp(this.userConfig.brand),
                    },
                    json: true,
                });
                const fullStatus = cachedResponse.body.resMsg.vehicleStatusInfo;
                if (statusConfig.refresh) {
                    const statusResponse = yield got(`${EU_BASE_URL[this.userConfig.brand]}/api/v2/spa/vehicles/${this.vehicleConfig.id}/status`, {
                        method: 'GET',
                        headers: {
                            'Authorization': this.controller.session.controlToken,
                            'ccsp-device-id': this.controller.session.deviceId,
                            'Content-Type': 'application/json',
                            'Stamp': yield getStamp(this.userConfig.brand),
                        },
                        json: true,
                    });
                    fullStatus.vehicleStatus = statusResponse.body.resMsg;
                    const locationResponse = yield got(`${EU_BASE_URL[this.userConfig.brand]}/api/v2/spa/vehicles/${this.vehicleConfig.id}/location`, {
                        method: 'GET',
                        headers: {
                            'Authorization': this.controller.session.controlToken,
                            'ccsp-device-id': this.controller.session.deviceId,
                            'Content-Type': 'application/json',
                            'Stamp': yield getStamp(this.userConfig.brand),
                        },
                        json: true,
                    });
                    fullStatus.vehicleLocation = locationResponse.body.resMsg.gpsDetail;
                }
                this._fullStatus = fullStatus;
                return this._fullStatus;
            }
            catch (err) {
                throw manageBluelinkyError(err, 'EuropeVehicle.Fullstatus');
            }
        });
    }
    status(input) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19;
        return __awaiter(this, void 0, void 0, function* () {
            const statusConfig = Object.assign(Object.assign({}, DEFAULT_VEHICLE_STATUS_OPTIONS), input);
            yield this.checkControlToken();
            try {
                const cacheString = statusConfig.refresh ? '' : '/latest';
                const response = yield got(`${EU_BASE_URL[this.userConfig.brand]}/api/v2/spa/vehicles/${this.vehicleConfig.id}/status${cacheString}`, {
                    method: 'GET',
                    headers: {
                        'Authorization': this.controller.session.controlToken,
                        'ccsp-device-id': this.controller.session.deviceId,
                        'Content-Type': 'application/json',
                        'Stamp': yield getStamp(this.userConfig.brand),
                    },
                    json: true,
                });
                // handles refreshing data
                const vehicleStatus = statusConfig.refresh
                    ? response.body.resMsg
                    : response.body.resMsg.vehicleStatusInfo.vehicleStatus;
                const parsedStatus = {
                    chassis: {
                        hoodOpen: vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.hoodOpen,
                        trunkOpen: vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.trunkOpen,
                        locked: vehicleStatus.doorLock,
                        openDoors: {
                            frontRight: !!((_a = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.doorOpen) === null || _a === void 0 ? void 0 : _a.frontRight),
                            frontLeft: !!((_b = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.doorOpen) === null || _b === void 0 ? void 0 : _b.frontLeft),
                            backLeft: !!((_c = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.doorOpen) === null || _c === void 0 ? void 0 : _c.backLeft),
                            backRight: !!((_d = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.doorOpen) === null || _d === void 0 ? void 0 : _d.backRight),
                        },
                        tirePressureWarningLamp: {
                            rearLeft: !!((_e = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.tirePressureLamp) === null || _e === void 0 ? void 0 : _e.tirePressureLampRL),
                            frontLeft: !!((_f = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.tirePressureLamp) === null || _f === void 0 ? void 0 : _f.tirePressureLampFL),
                            frontRight: !!((_g = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.tirePressureLamp) === null || _g === void 0 ? void 0 : _g.tirePressureLampFR),
                            rearRight: !!((_h = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.tirePressureLamp) === null || _h === void 0 ? void 0 : _h.tirePressureLampRR),
                            all: !!((_j = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.tirePressureLamp) === null || _j === void 0 ? void 0 : _j.tirePressureWarningLampAll),
                        },
                    },
                    climate: {
                        active: vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.airCtrlOn,
                        steeringwheelHeat: !!(vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.steerWheelHeat),
                        sideMirrorHeat: false,
                        rearWindowHeat: !!(vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.sideBackWindowHeat),
                        defrost: vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.defrost,
                        temperatureSetpoint: tempCodeToCelsius((_k = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.airTemp) === null || _k === void 0 ? void 0 : _k.value),
                        temperatureUnit: (_l = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.airTemp) === null || _l === void 0 ? void 0 : _l.unit,
                    },
                    engine: {
                        ignition: vehicleStatus.engine,
                        accessory: vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.acc,
                        rangeGas: (_r = (_q = (_p = (_o = (_m = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.evStatus) === null || _m === void 0 ? void 0 : _m.drvDistance[0]) === null || _o === void 0 ? void 0 : _o.rangeByFuel) === null || _p === void 0 ? void 0 : _p.gasModeRange) === null || _q === void 0 ? void 0 : _q.value) !== null && _r !== void 0 ? _r : (_s = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.dte) === null || _s === void 0 ? void 0 : _s.value,
                        // EV
                        range: (_w = (_v = (_u = (_t = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.evStatus) === null || _t === void 0 ? void 0 : _t.drvDistance[0]) === null || _u === void 0 ? void 0 : _u.rangeByFuel) === null || _v === void 0 ? void 0 : _v.totalAvailableRange) === null || _w === void 0 ? void 0 : _w.value,
                        rangeEV: (_0 = (_z = (_y = (_x = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.evStatus) === null || _x === void 0 ? void 0 : _x.drvDistance[0]) === null || _y === void 0 ? void 0 : _y.rangeByFuel) === null || _z === void 0 ? void 0 : _z.evModeRange) === null || _0 === void 0 ? void 0 : _0.value,
                        plugedTo: (_2 = (_1 = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.evStatus) === null || _1 === void 0 ? void 0 : _1.batteryPlugin) !== null && _2 !== void 0 ? _2 : EVPlugTypes.UNPLUGED,
                        charging: (_3 = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.evStatus) === null || _3 === void 0 ? void 0 : _3.batteryCharge,
                        estimatedCurrentChargeDuration: (_6 = (_5 = (_4 = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.evStatus) === null || _4 === void 0 ? void 0 : _4.remainTime2) === null || _5 === void 0 ? void 0 : _5.atc) === null || _6 === void 0 ? void 0 : _6.value,
                        estimatedFastChargeDuration: (_9 = (_8 = (_7 = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.evStatus) === null || _7 === void 0 ? void 0 : _7.remainTime2) === null || _8 === void 0 ? void 0 : _8.etc1) === null || _9 === void 0 ? void 0 : _9.value,
                        estimatedPortableChargeDuration: (_12 = (_11 = (_10 = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.evStatus) === null || _10 === void 0 ? void 0 : _10.remainTime2) === null || _11 === void 0 ? void 0 : _11.etc2) === null || _12 === void 0 ? void 0 : _12.value,
                        estimatedStationChargeDuration: (_15 = (_14 = (_13 = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.evStatus) === null || _13 === void 0 ? void 0 : _13.remainTime2) === null || _14 === void 0 ? void 0 : _14.etc3) === null || _15 === void 0 ? void 0 : _15.value,
                        batteryCharge12v: (_16 = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.battery) === null || _16 === void 0 ? void 0 : _16.batSoc,
                        batteryChargeHV: (_17 = vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.evStatus) === null || _17 === void 0 ? void 0 : _17.batteryStatus,
                    },
                    lastupdate: parseDate(vehicleStatus === null || vehicleStatus === void 0 ? void 0 : vehicleStatus.time, 'yyyyMMddHHmmSS', new Date())
                };
                if (!parsedStatus.engine.range) {
                    if (parsedStatus.engine.rangeEV || parsedStatus.engine.rangeGas) {
                        parsedStatus.engine.range =
                            ((_18 = parsedStatus.engine.rangeEV) !== null && _18 !== void 0 ? _18 : 0) + ((_19 = parsedStatus.engine.rangeGas) !== null && _19 !== void 0 ? _19 : 0);
                    }
                }
                this._status = statusConfig.parsed ? parsedStatus : vehicleStatus;
                return this._status;
            }
            catch (err) {
                throw manageBluelinkyError(err, 'EuropeVehicle.status');
            }
        });
    }
    odometer() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.checkControlToken();
            try {
                const response = yield got(`${EU_BASE_URL[this.userConfig.brand]}/api/v2/spa/vehicles/${this.vehicleConfig.id}/status/latest`, {
                    method: 'GET',
                    headers: {
                        'Authorization': this.controller.session.controlToken,
                        'ccsp-device-id': this.controller.session.deviceId,
                        'Content-Type': 'application/json',
                        'Stamp': yield getStamp(this.userConfig.brand),
                    },
                    json: true,
                });
                this._odometer = response.body.resMsg.vehicleStatusInfo.odometer;
                return this._odometer;
            }
            catch (err) {
                throw manageBluelinkyError(err, 'EuropeVehicle.odometer');
            }
        });
    }
    location() {
        var _a, _b, _c, _d, _e, _f;
        return __awaiter(this, void 0, void 0, function* () {
            yield this.checkControlToken();
            try {
                const response = yield got(`${EU_BASE_URL[this.userConfig.brand]}/api/v2/spa/vehicles/${this.vehicleConfig.id}/location`, {
                    method: 'GET',
                    headers: {
                        'Authorization': this.controller.session.controlToken,
                        'ccsp-device-id': this.controller.session.deviceId,
                        'Content-Type': 'application/json',
                        'Stamp': yield getStamp(this.userConfig.brand),
                    },
                    json: true,
                });
                const data = (_a = response.body.resMsg.gpsDetail) !== null && _a !== void 0 ? _a : response.body.resMsg;
                this._location = {
                    latitude: (_b = data === null || data === void 0 ? void 0 : data.coord) === null || _b === void 0 ? void 0 : _b.lat,
                    longitude: (_c = data === null || data === void 0 ? void 0 : data.coord) === null || _c === void 0 ? void 0 : _c.lon,
                    altitude: (_d = data === null || data === void 0 ? void 0 : data.coord) === null || _d === void 0 ? void 0 : _d.alt,
                    speed: {
                        unit: (_e = data === null || data === void 0 ? void 0 : data.speed) === null || _e === void 0 ? void 0 : _e.unit,
                        value: (_f = data === null || data === void 0 ? void 0 : data.speed) === null || _f === void 0 ? void 0 : _f.value,
                    },
                    heading: data === null || data === void 0 ? void 0 : data.head,
                };
                return this._location;
            }
            catch (err) {
                throw manageBluelinkyError(err, 'EuropeVehicle.location');
            }
        });
    }
    startCharge() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.checkControlToken();
            try {
                const response = yield got(`${EU_BASE_URL[this.userConfig.brand]}/api/v2/spa/vehicles/${this.vehicleConfig.id}/control/charge`, {
                    method: 'POST',
                    headers: {
                        'Authorization': this.controller.session.controlToken,
                        'ccsp-device-id': this.controller.session.deviceId,
                        'Content-Type': 'application/json',
                        'Stamp': yield getStamp(this.userConfig.brand),
                    },
                    body: {
                        action: 'start',
                        deviceId: this.controller.session.deviceId,
                    },
                    json: true,
                });
                if (response.statusCode === 200) {
                    logger.debug(`Send start charge command to Vehicle ${this.vehicleConfig.id}`);
                    return 'Start charge successful';
                }
                throw 'Something went wrong!';
            }
            catch (err) {
                throw manageBluelinkyError(err, 'EuropeVehicle.startCharge');
            }
        });
    }
    stopCharge() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.checkControlToken();
            try {
                const response = yield got(`${EU_BASE_URL[this.userConfig.brand]}/api/v2/spa/vehicles/${this.vehicleConfig.id}/control/charge`, {
                    method: 'POST',
                    headers: {
                        'Authorization': this.controller.session.controlToken,
                        'ccsp-device-id': this.controller.session.deviceId,
                        'Content-Type': 'application/json',
                        'Stamp': yield getStamp(this.userConfig.brand),
                    },
                    body: {
                        action: 'stop',
                        deviceId: this.controller.session.deviceId,
                    },
                    json: true,
                });
                if (response.statusCode === 200) {
                    logger.debug(`Send stop charge command to Vehicle ${this.vehicleConfig.id}`);
                    return 'Stop charge successful';
                }
                throw 'Something went wrong!';
            }
            catch (err) {
                throw manageBluelinkyError(err, 'EuropeVehicle.stopCharge');
            }
        });
    }
    monthlyReport(month = { year: new Date().getFullYear(), month: new Date().getMonth() + 1 }) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        return __awaiter(this, void 0, void 0, function* () {
            yield this.checkControlToken();
            try {
                const response = yield got(`${EU_BASE_URL[this.userConfig.brand]}/api/v2/spa/vehicles/${this.vehicleConfig.id}/monthlyreport`, {
                    method: 'POST',
                    headers: {
                        'Authorization': this.controller.session.controlToken,
                        'ccsp-device-id': this.controller.session.deviceId,
                        'Content-Type': 'application/json',
                        'Stamp': yield getStamp(this.userConfig.brand),
                    },
                    body: {
                        setRptMonth: toMonthDate(month)
                    },
                    json: true,
                });
                const rawData = (_a = response.body.resMsg) === null || _a === void 0 ? void 0 : _a.monthlyReport;
                if (rawData) {
                    return {
                        start: (_b = rawData.ifo) === null || _b === void 0 ? void 0 : _b.mvrMonthStart,
                        end: (_c = rawData.ifo) === null || _c === void 0 ? void 0 : _c.mvrMonthEnd,
                        breakdown: rawData.breakdown,
                        driving: rawData.driving ? {
                            distance: (_d = rawData.driving) === null || _d === void 0 ? void 0 : _d.runDistance,
                            startCount: (_e = rawData.driving) === null || _e === void 0 ? void 0 : _e.engineStartCount,
                            durations: {
                                idle: (_f = rawData.driving) === null || _f === void 0 ? void 0 : _f.engineIdleTime,
                                drive: (_g = rawData.driving) === null || _g === void 0 ? void 0 : _g.engineOnTime,
                            }
                        } : undefined,
                        vehicleStatus: rawData.vehicleStatus ? {
                            tpms: ((_h = rawData.vehicleStatus) === null || _h === void 0 ? void 0 : _h.tpmsSupport) ? Boolean((_j = rawData.vehicleStatus) === null || _j === void 0 ? void 0 : _j.tpmsSupport) : undefined,
                            tirePressure: {
                                all: ((_l = (_k = rawData.vehicleStatus) === null || _k === void 0 ? void 0 : _k.tirePressure) === null || _l === void 0 ? void 0 : _l.tirePressureLampAll) == '1',
                            }
                        } : undefined,
                    };
                }
                return;
            }
            catch (err) {
                throw manageBluelinkyError(err, 'EuropeVehicle.monthyReports');
            }
        });
    }
    tripInfo(date = { year: new Date().getFullYear(), month: new Date().getMonth() + 1, day: new Date().getDate() }) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.checkControlToken();
            try {
                const response = yield got(`${EU_BASE_URL[this.userConfig.brand]}/api/v1/spa/vehicles/${this.vehicleConfig.id}/tripinfo`, {
                    method: 'POST',
                    headers: {
                        'Authorization': this.controller.session.accessToken,
                        'ccsp-device-id': this.controller.session.deviceId,
                        'Content-Type': 'application/json',
                        'Stamp': yield getStamp(this.userConfig.brand),
                    },
                    body: {
                        setTripMonth: !date.day ? toMonthDate(date) : undefined,
                        setTripLatest: 10,
                        setTripDay: date.day ? toDayDate(date) : undefined,
                        tripPeriodType: 1
                    },
                    json: true,
                });
                const rawData = response.body.resMsg.dayTripList;
                if (rawData && Array.isArray(rawData)) {
                    return rawData.map(day => ({
                        dayRaw: day.tripDay,
                        tripsCount: day.dayTripCnt,
                        distance: day.tripDist,
                        durations: {
                            drive: day.tripDrvTime,
                            idle: day.tripIdleTime
                        },
                        speed: {
                            avg: day.tripAvgSpeed,
                            max: day.tripMaxSpeed
                        },
                        trips: Array.isArray(day.tripList) ?
                            day.tripList.map(trip => {
                                const start = parseDate(`${day.tripDay}${trip.tripTime}`, 'yyyyMMddHHmmss', Date.now());
                                return {
                                    timeRaw: trip.tripTime,
                                    start,
                                    end: addMinutes(start, trip.tripDrvTime),
                                    durations: {
                                        drive: trip.tripDrvTime,
                                        idle: trip.tripIdleTime,
                                    },
                                    speed: {
                                        avg: trip.tripAvgSpeed,
                                        max: trip.tripMaxSpeed,
                                    },
                                    distance: trip.tripDist,
                                };
                            })
                            : [],
                    }));
                }
                return;
            }
            catch (err) {
                throw manageBluelinkyError(err, 'EuropeVehicle.history');
            }
        });
    }
    /**
     * Warning: Only works on EV
     */
    getChargeTargets() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            yield this.checkControlToken();
            try {
                const response = yield got(`${EU_BASE_URL[this.userConfig.brand]}/api/v2/spa/vehicles/${this.vehicleConfig.id}/charge/target`, {
                    method: 'GET',
                    headers: {
                        'Authorization': this.controller.session.controlToken,
                        'ccsp-device-id': this.controller.session.deviceId,
                        'Content-Type': 'application/json',
                        'Stamp': yield getStamp(this.userConfig.brand),
                    },
                    json: true,
                });
                const rawData = (_a = response.body.resMsg) === null || _a === void 0 ? void 0 : _a.targetSOClist;
                if (rawData && Array.isArray(rawData)) {
                    return rawData.map((rawSOC) => {
                        var _a, _b;
                        return ({
                            distance: (_b = (_a = rawSOC.drvDistance) === null || _a === void 0 ? void 0 : _a.distanceType) === null || _b === void 0 ? void 0 : _b.distanceValue,
                            targetLevel: rawSOC.targetSOClevel,
                            type: rawSOC.plugType
                        });
                    });
                }
                return;
            }
            catch (err) {
                throw manageBluelinkyError(err, 'EuropeVehicle.getChargeTargets');
            }
        });
    }
    /**
     * Warning: Only works on EV
     */
    setChargeTargets(limits) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.checkControlToken();
            if (!POSSIBLE_CHARGE_LIMIT_VALUES.includes(limits.fast) || !POSSIBLE_CHARGE_LIMIT_VALUES.includes(limits.slow)) {
                throw new ManagedBluelinkyError(`Charge target values are limited to ${POSSIBLE_CHARGE_LIMIT_VALUES.join(', ')}`);
            }
            try {
                yield got(`${EU_BASE_URL[this.userConfig.brand]}/api/v2/spa/vehicles/${this.vehicleConfig.id}/charge/target`, {
                    method: 'POST',
                    headers: {
                        'Authorization': this.controller.session.controlToken,
                        'ccsp-device-id': this.controller.session.deviceId,
                        'Content-Type': 'application/json',
                        'Stamp': yield getStamp(this.userConfig.brand),
                    },
                    body: {
                        targetSOClist: [
                            { plugType: EVChargeModeTypes.FAST, targetSOClevel: limits.fast },
                            { plugType: EVChargeModeTypes.SLOW, targetSOClevel: limits.slow }
                        ]
                    },
                    json: true,
                });
            }
            catch (err) {
                throw manageBluelinkyError(err, 'EuropeVehicle.setChargeTargets');
            }
        });
    }
}
function toMonthDate(month) {
    return `${month.year}${month.month.toString().padStart(2, '0')}`;
}
function toDayDate(date) {
    return `${toMonthDate(date)}${date.day.toString().padStart(2, '0')}`;
}
//# sourceMappingURL=european.vehicle.js.map